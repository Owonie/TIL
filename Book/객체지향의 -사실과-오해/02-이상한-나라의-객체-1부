# 이상한 나라의 객체 1부

\*\* "객체지향 패러다임은 지시글 추상화하고 추상화한 지식을 객체 안에 갭슐화함으로써 실세계 문제에 내재된 복잡성을 관리하려고 한다. 객체를 발견하고 창조하는 것은 지식과 행동을 구조화하는 문제다." - 레베카 워프스브로

지난 챕터에서도 언급된 것 처럼, 객체는 상태(state)와 행동(behavior)로 이루어져 있는 실체(구조체)다. 그렇다면 객체지향을 하는 것은 사용하고 싶은 개념들을 추상화 한 다음, 로직에 맞게 객체를 캡슐화하고 필요한 상태와 행동을 구체적으로 설계해주는 프로그래밍 패러다임이라고 이해할 수도 있을 것 같다.

### 객체지향과 인지 능력

해당 챕터에서는 심리학 연구를 통해 사람은 행동하는 물체를 하나의 개념으로 인지한다는 내용을 알려준다. 사람은 본능적으로 비슷한 행동 또는 모습을 갖춘 물체들을 유기적인 단위로 집합을 만들어 세상을 바라본다고 한다. 인간의 이런 선천적인 인지능력 덕분에 세상을 훨씬 효율적으로 식별하고 분류할 수 있어, 나아가 훨씬 복잡한 정의를 하고 새로운 개념들을 창출해 낼 수 있다.

프로그래밍 속 객체지향은 어떻게 보면 인간이 가장 접근하기 쉬운 제일 직관적인 패러다임이라고 말할 수 있다. 이는 인간의 가장 기본적인 인지 능력을 기반으로 추출된 패러다임이기 때문이다.

인간이 지각할 수 있는 객체는 사실상 물리적인 경계를 넘어선다. 훨씬 복잡하고 이해하기 어려운 추상적 개념들 또한 객체로서 구분짓고 인식할 수 있다. 그리고 인류에겐 강력한 추상화 능력이 있는데, 이는 훨씬 복잡한 문제를 세분화 하여 이해할 수 있도록 하고, 더 나아가 더 이해하기 어려운 객체들을 인식할 수 있도록 도와준다.

아쉽게도 현실 세계와 소프트웨어 세계 사이엔 커다란 무언가가 가로막고 있다. 완벽하게 소프트웨어 세계를 인간의 객체인지 방법으로 바라볼 수는 없다는 뜻이다. 사실상 객체지향 속 객체의 모습은 현실 세계의 객체와는 어느정도 거리감이 있다. 컴퓨터 속 객체는 주문 객체가 스스로 결제 금액을 계산하고, 전력 없이 전등을 켜고 끌 수 있으며, 자동차가 스스로 생성과 소멸을 행할 수 있기 때문이다. 저자는 이러한 괴리감을 <이상한 나라의 엘리스>속에서 일어나는 사건처럼 낯설고 기묘하다고 설명한다.

### 객체, 그리고 이상한 나라

앨리스가 처음 굴에 빠졌을 때 여러가지 일들을 거치며 키가 커졌다 작아졌다 하는 장면이 있다. 만일 앨리스를 하나의 객체로 본다면, 앨리스의 크기는 앨리스 내부에 캡슐화 되어있는 상태(속성)값 중 하나다. 앨리스의 상태(state)는 앨리스의 행동(behavior)에 따라 결정된다. 그리고 행동의 결과는 전 상태에 의존적인 관계를 띄고있다. 또한 각가지 행동들은 어느 시점에 실행 했을 때 마다 반환되는 결과가 다르게 된다.

앨리스의 이야기를 통해 저자는 아래와 같은 특징들을 **"앨리스 객체"**에서 도출해낸다:

- 객체는 상태를 가지며 변경이 가능하다.
- 행동은 상태를 변경하고, 결과는 행동의 순서와 상태에 의존적이다.
- 결과는 상태로 서술이 가능하다.

도출해낸 특징들은 추후 객체지향 속 객체를 설명할 때 사용하게 된다.

### 객체, 그리고 소프트웨어 나라

하나의 객체를 효율적이게 설명하기 위해 **상태(state), 행동(behavior), 식별자(identify)** 세가지 속성을 지닌 실체로 보는 것이 가장 효과적이다. 그리고 책에서 정의하는 객체는 다음과 같다:

```
객체란 식별 가능한 개체 또는 사물이다. 객체는 자동차처럼 만질 수 있는 구체적인 사물일 수도 있고, 시간처럼 추상적인 개념일 수도 있다. 객체는 구별 가능한 식별자, 특징적인 행동, 변경 가능한 상태를 가진다. 소프트웨어 안에서 객체는 저장된 상태와 실행 가능한 코드를 통해 구현된다.
```

#### 상태(state)

개인적인 의견이지만, 소프트웨어 속 상태를 state가 아닌 또 다른 단어로 정의할 수 있다고 생각한다 - 바로 context다. Context의 사전적 의미는 문맥 또는 맥락을 뜻한다. 객체 속 상태의 존재 의미는 과거의 모든 행동 이력을 전부 설명하지 않아도 행동의 결과를 쉽게 예측할 수 있게 하며, 현재를 기반으로 객체의 행동 방식을 이해하고 그에 상응하는 결과를 얻어 낼 수 있다는 것이다. 사실상 상태를 저장한다는 뜻은 전체적인 맥락을 파악하고 있다는 것과 같다고 생각한다. 적어도 소프트웨어의 행동과 결과 앞에서는 말이다.

객체의 상태는 객체가 아니지만 결과에 영향을 줄 수 있는 모든 정보를 의미할 수도 있다. 물론 다른 객체의 상태 또는 객체 그 자체가 어떠한 상태의 값이 될 수도 있다. 책에서는 객체의 상태를 아래와 같이 정의한다:

```
상태는 특정 시점에 객체가 가지고 있는 정보의 집합으로 객체의 구조적 특징을 표현한다. 객체의 상태는 객체에 존재하는 정적인 프로퍼티와 동적인 프로퍼티 값으로 구성된다. 객체의 프로퍼티는 단순한 값과 다른 객체를 참조하는 링크로 구분할 수 있다.
```

객체는 자율적인 존재라는 것을 저자는 명심하라고 당부한다. 객체의 상태는 외부의 객체가 직접적으로 다룰 수 없다. 객체의 상태는 완벽하게 객체라는 울타리로 캡슐화 되어있기 때문이다. 때문에 간접적으로 객체의 상태를 변경하거나 조회할 수 있는 방법이 필요하는데, 이를 가능케 하는 것이 바로 객체의 행동이다. 객체는 스스로의 행동에 의해서만 상태가 변경되는 것을 보장함으로써 객체의 자율성을 유지한다. 잊으면 안되는 점은 객체지향의 기본틀은 상태와 행동을 하나의 단위로 묶는다는 사실이다.

### 행동

객체의 상태는 정적인 속성이라 스스로 바뀌는 일이 절대 없다. 하지만 우리가 원하는 결과물을 만들어 내기 위해선 반드시 상태의 값을 변경 할 수 있도록 만들어 줘야 한다. 객체가 취하는 행동은 객체 자신의 상태를 변경시킨다. 객체의 행동이 객체의 상태를 바꾸는 과정에선 부수 효과(side effect)가 발생되는데, 이러한 개념을 이용하면 행동과 상태의 관계를 서술하기 훨씬 수월해진다.

```
행동은 객체의 상태를 변경시키며, 행동의 결과는 상태에 의존적이다.
```

단일 객체의 행동만으로 이미 상태를 훌륭하게 변경할 수 있다. 하지만 우리는 항상 프로그래밍으로 훨씬 복잡한 기능을 수행하여 멋진 결과를 만들어주길 바란다. 객체는 개체라는 개념도 존재하지만, 그룹 또한 객체가 될 수 있다는 사실을 잊으면 안된다. 여러개의 객체가 하나의 그룹객체가 될 수 있으며, 이를 책에서는 **협력**이라는 단어로 객체 간 상호작용을 묘사한다.

### 협력, 그리고 캡슐화

"객체가 다른 객체와 협력하는 유일한 방법은 다른 객체에게 요청을 보내는 것이다." 객체 간의 협력은 자기 자신의 상태 뿐만 아니라 다른 객체의 상태 변경을 유발 할 수 있다. 따라서 객체의 행동이 일으키는 부수 효과는 두가지로 서술할 수 있다:

- 객체 자신의 상태 변경
- 행동 내에서 협력하는 다른 객체에 대한 메시지 전송

그리고 책에서는 행동을 다음과 같이 정의한다:

```
행동이란 외부의 요청 또는 수신된 메시지에 응답하기 위해 동작하고 반응하는 활동이다. 행동의 결과로 객체는 자신의 상태를 변경하거나 다른 객체에게 메시지를 전달할 수 있다. 객체는 행동을 통해 다른 객체와의 협력에 참여하므로 행동은 외부에 가시적이어야 한다.
```

소프트웨어 세계 속 객체의 가장 재밌는 점은 자신의 상태를 스스로 변경해야 된다는 것이다. 예를 들어 물컵 객체가 있다고 한다면, 물을 마셔서 물컵 객체의 물 양 상태를 줄이기 위해선, 반드시 물컵 객체 스스로의 행동을 통해 변경해야된다.

캡슐화는 객체의 자율성을 높이고 협력을 단순하고 유연하게 만들어 준다. 객체는 상태를 내부에 감추고 외부에는 오로지 객체의 행동만 노출한다. 이는 객체 간 협력을 하기 위한 약속된 전제 조건이다. 캡슐화는 객체가 스스로 판단하고 결정할 수 있게 해주고, 객체들이 훨씬 똑똑하게 만들어준다. 그렇기에 객체를 잘 다루기 위해서는 캡슐화를 하는 것에 능숙해져야한다.

**_2부에서 계속_**
